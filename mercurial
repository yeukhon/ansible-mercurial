#!/usr/bin/python

import os
import shutil
from subprocess import Popen, PIPE
#import traceback

DOCUMENTATION = '''
---
module: mercurial
short_description: Manages Mercurial (hg) repositories
description:
  - Manages Mercurial (hg) repositories. Supports SSH, HTTP/S and local operation. To access private repositories, see the Notes section below.
version_added: "1.0"
options:
  repo:
      description:
            - The repository location on disk or on remote service such as Bitbucket.
      required: true
      default: null
  dest:
      description:
            - Absolute path of where the repository should be on disk.
      required: true
      default: null
  state:
      description:
            - State of the repository
      required: false
      default: present
      choices: [ "present", "absent", "latest" ]
author: Yeukhon Wong
notes:
  - To access private repositories using SSH, you can include `StrictHostKeyChecking no` in .ssh/config so it accepts the ssh authentication the first time it connects to an unknown host. 
examples:
- code: "mercurial: repo=https://bitbucket.org/user/repo_name dest=/home/user/repo_name"
  description: Clone the default branch of repo_name.
- code: "mercurial: repo=https://bitbucket.org/user/repo_name dest=/home/user/repo_name state=latest rev="72f75ae"
  description: Clone the repository where the tip is set to revision 72f75ae.
- code: "mercurial: repo=https://bitbucket.org/user/repo_name dest=/home/user/repo_name state=present rev="72f75ae"
  description: Ensure the repository is cloned to disk and revision 72f75ae is the tip of the respoistory.
- code: "mercurial: repo=https://bitbucket.org/user/repo_name dest=/home/user/repo_name state=absent"
  description: Ensure the repository at dest is removed from the disk.
'''

class HgError(Exception):
    """
    Custom exception class to report hg command error.
    
    Attributes
    ----------
    msg : str
        The error message to show to users.
    
    Methods
    -------
    __init__(msg, stderr='')
        Constructor of HgError exception. Argument `msg` is the primary
        message to show to the user. `stderr` is additional information
        concatenated to `msg`.

    __str__()
        Returns `msg` passed to the constructor (may include `stderr` if
        it isn't empty initially through constructor).

    """

    def __init__(self, msg, stderr=''):
        self.msg = msg + \
                  "\nExtra information on this error: \n" + \
                   stderr
    def __str__(self):
        return self.msg

def _hg_command(args_list):
    """
    Take hg command arguemtns and invoke the command via subprocess.

    Parameters
    ----------
    args_list : list
        A list of arguments and options for the hg command.

    Returns
    -------
    out : str
        Standard output post hg-command execution.
    err : str
        Standard error post hg-command execution.
    p.returncode : int
        Return code from the hg-command.
        0 is always success. For other values, please
        refer to the hg help.

    See Also
    --------
    `hg -v command_name --help` for the returncode and usage.

    """

    cmd = ['hg'] + args_list
    p = Popen(cmd, stdout=PIPE, stderr=PIPE)
    out, err = p.communicate()
    return out, err, p.returncode

def _hg_verify(dest):
    """
    Verify the integrity of the repository.

    Parameters
    ----------
    dest : str
        The full path where the repository lives on disk.
    
    Returns
    -------
    success : int
        0 if integrity is good

    Raises
    ------
    HgError
        If integrity failed or other unknown conditions such as non-existing repository.
            
    See Also
    --------
    `hg -v verify --help` for more information.
    
    """

    warning = 'hg repository at {dest} is {reason}'
    error_msg = ''
    out, err, code = _hg_command( ['verify', '-R', dest] )
    if code == 1:
        error_msg = warning.format(dest=dest, reason='corrupted')
    elif code == 255:
        error_msg = warning.format(dest=dest, reason='missing')
    elif code == 0:
        return True
    # either unknown returncode, corrupted, missing
    raise HgError(error_msg, stderr=err)

def _post_op_hg_rev_check(dest, rev):
    """
    Verify the tip is the same as `rev`.

    This function is usually called after some hg operations
    such as `clone`. However, this check is skipped if `rev`
    is the string `default` since it will result an error. 
    For this particular case, pull is performed.

    Parameters
    ----------
    dest : str
        The full path where the repository lives on disk.
    
    rev : str
        Desired revision to check against the current tip.

    Returns
    -------
    success : bool
        True if the tip is `rev`.

    Raises
    ------
    HgError
        When tip is not `rev` or when the command fails.
            
    See Also
    --------
    `hg -v tip --help` for more information.

    """

    err1 = "Unable to perform hg tip."
    err2 = "tip is different from %s. See below for extended summary." % rev

    if rev == 'default':
        out, err, code = _hg_command( ['pull', '-R', dest] )
        if "no changes found" in out:
            return True
        else:
            raise HgError(err2, stderr=out)
    else:
        out, err, code = _hg_command( ['tip', '-R', dest] )
        if rev in out:   # rev should be part of the output (changeset: rev ...)
            return True
        else:
            if code != 0: # something went wrong with hg tip
                raise HgError(err1, stderr=err)
            else: # hg tip is fine, but tip != rev as we hoped
                raise HgError(err2, stderr=out)

def pull_and_update(repo, dest, rev):
    """
    Perform an update on the target repository.

    It first pulls the given `rev` (e.g. default) and then
    updates the current repository workspace physically.

    Parameters
    ----------
    repo : str
        The location of the repository. It can either be
        a remote service such as Bitbucket or locally.
        SSH, HTTP, HTTPS and local are valid repo scheme and
        location.
    dest : str
        Full path where the pull and update takes place.
    rev : str
        Default to the tip of the default branch.

    Returns
    -------
    success : bool
        True if update completes without issue. Otherwise,
        `HgError` is raised.
    
    Raises
    ------
    HgError
        When either pull or update fails.
    
    """
    if _hg_verify(dest):
        cmd1 = ['pull', '-R', dest, '-r', rev]
        out, err, code = _hg_command( cmd1 )

        # For returncode claifiation, see _hg_command written above.
        if code == 1:
            raise HgError("Unable to perform pull on %s" % dest, stderr=err)
        elif code == 0:        
            cmd2 = ['update', '-R', dest, '-r', rev]
            out, err, code = _hg_command( cmd2 )
            if code == 1:
                raise HgError("There are unresolved files in %s" % dest, stderr=err)
            elif code == 0:
                # so far pull and update seems to be working, check rev is met
                _post_op_hg_rev_check(dest, rev)
                return True
        # when code aren't 1 or 0 in either command
        raise HgError("", stderr=err)

def clone(repo, dest, rev):
    """
    Clone down a copy of the repository.

    Performs a simple hg clone from `repo` to
    `dest` given revision `rev` which defaults to
    the tip of the default branch.

    Parameters
    ----------
    repo : str
        The location of the repository. It can either be
        a remote service such as Bitbucket or locally.
        SSH, HTTP, HTTPS and local are valid repo scheme and
        location.
    dest : str
        Full path where the clone repository should reside.
    rev : str
        Default to the tip of the default branch.

    Returns
    -------
    success : bool
        True if clone is successful and integrity is verified.
        False if the `dest` exists; no clone is performed.

    Raises
    ------
    HgError
        When the repository's integrity check fails.
    
    """

    if os.path.exists(dest):
        return False

    cmd = ['clone', repo, dest, '-r', rev]
    cout, cerr, ccode = _hg_command( cmd )

    _hg_verify(dest)   # ensure repo integrity is met
    _post_op_hg_rev_check(dest, rev)  # ensure rev is met
    return True

def main():
    module = AnsibleModule(
        argument_spec = dict(
            repo = dict( required=True ),	    
            dest = dict( required=True ),
            state = dict( default='present', choices=['present', 'absent', 'latest'] ),
            rev = dict( default="default" ),
        ),
    )
    params = module.params
    repo = params['repo']
    state = params['state']
    dest = params['dest']
    rev = params['rev']

    try:
        if state == 'absent':
            if not os.path.exists(dest):
                shutil.rmtree(dest)
            changed = True
        elif state == 'present':
            changed = clone(repo, dest, rev)
        elif state == 'latest':
            changed = pull_and_update(repo, dest, rev)
        module.exit_json( dest=dest, changed=changed )
    except HgError as e:
        module.fail_json(msg=str(msg), params=params)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
